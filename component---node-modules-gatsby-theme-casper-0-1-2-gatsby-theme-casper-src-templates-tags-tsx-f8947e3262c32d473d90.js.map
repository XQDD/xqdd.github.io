{"version":3,"sources":["webpack:///./node_modules/_gatsby-theme-casper@0.1.2@gatsby-theme-casper/src/templates/tags.tsx"],"names":["Tags","props","config","data","site","siteMetadata","tag","pageContext","allMarkdownRemark","edges","totalCount","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","title","name","content","description","property","siteUrl","pathContext","slug","facebook","twitter","split","className","image","css","outer","SiteHeader","style","backgroundImage","childImageSharp","fluid","src","inner","isHome","SiteMain","PostFeed","PostFeedRaise","map","key","fields","post","pageQuery"],"mappings":"gTA4IeA,UA9E0B,SAAAC,GACvC,IAAMC,EAASD,EAAME,KAAKC,KAAKC,aACzBC,EAAOL,EAAMM,YAAYD,IAAOL,EAAMM,YAAYD,IAAM,GAFd,EAGlBL,EAAME,KAAKK,kBAAjCC,EAHwC,EAGxCA,MAAOC,EAHiC,EAGjCA,WACTC,EAAUV,EAAME,KAAKS,WAAWH,MAAMI,MAC1C,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,GAAGC,gBAAkBX,EAAIW,iBAGvC,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMC,KAAMhB,EAAOgB,OACnB,yBACGZ,EADH,MACWJ,EAAOiB,OAElB,oBACEC,KAAK,cACLC,QAASV,GAAWA,EAAQI,KAAOJ,EAAQI,KAAKO,YAAc,KAEhE,oBAAMC,SAAS,eAAeF,QAASnB,EAAOiB,QAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAAYf,EAAL,MAAcJ,EAAOiB,QACtD,oBAAMI,SAAS,SAASF,QAASnB,EAAOsB,QAAUvB,EAAMwB,YAAYC,OACnExB,EAAOyB,UAAY,oBAAMJ,SAAS,oBAAoBF,QAASnB,EAAOyB,WACvE,oBAAMP,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAAYf,EAAL,MAAcJ,EAAOiB,QACvD,oBAAMC,KAAK,cAAcC,QAASnB,EAAOsB,QAAUvB,EAAMwB,YAAYC,OACpExB,EAAO0B,SACN,oBACER,KAAK,eACLC,QAAO,IAAMnB,EAAO0B,QAAQC,MAAM,wBAAwB,MAIhE,YAAC,IAAD,KACE,sBACEC,UAAcnB,GAAWA,EAAQI,KAAKgB,MAAQ,GAAK,WACnDC,IAAG,YAAE,CAACC,IAAOC,MACbC,MAAO,CACLC,gBACEzB,GAAWA,EAAQI,KAAKgB,MAAxB,QACUpB,EAAQI,KAAKgB,MAAMM,gBAAgBC,MAAMC,IADnD,KAEE,KAGN,mBAAKP,IAAKQ,KACR,YAAC,IAAD,CAASC,QAAQ,IACjB,YAAC,IAAD,KACE,YAAC,IAAD,KAAYnC,GACZ,YAAC,IAAD,KACGK,GAAWA,EAAQI,KAAKO,YACvBX,EAAQI,KAAKO,YAEb,iDACmBZ,EAAa,GAAQA,EAArB,SACD,IAAfA,GAAoB,SACL,IAAfA,GAAoB,gBAOjC,oBAAMM,GAAG,YAAYgB,IAAG,YAAE,CAACU,IAAUT,OACnC,mBAAKD,IAAKQ,KACR,mBAAKR,IAAG,YAAE,CAACW,IAAUC,OAClBnC,EAAMoC,KAAI,gBAAG9B,EAAH,EAAGA,KAAH,OACT,YAAC,IAAD,CAAU+B,IAAK/B,EAAKgC,OAAOrB,KAAMsB,KAAMjC,UAK/C,YAAC,IAAD,SAQD,IAAMkC,EAAY","file":"component---node-modules-gatsby-theme-casper-0-1-2-gatsby-theme-casper-src-templates-tags-tsx-f8947e3262c32d473d90.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from './post';\n\ninterface TagTemplateProps {\n  pathContext: {\n    slug: string;\n  };\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              fluid: any;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n    site: {\n      siteMetadata: {\n        title: string;\n        lang: string;\n        description: string;\n        siteUrl: string;\n        facebook?: string;\n        twitter?: string;\n      };\n    };\n  };\n}\n\nconst Tags: React.FC<TagTemplateProps> = props => {\n  const config = props.data.site.siteMetadata;\n  const tag = (props.pageContext.tag) ? props.pageContext.tag : '';\n  const { edges, totalCount } = props.data.allMarkdownRemark;\n  const tagData = props.data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta\n          name=\"description\"\n          content={tagData && tagData.node ? tagData.node.description : ''}\n        />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + props.pathContext.slug} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + props.pathContext.slug} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className={`${tagData && tagData.node.image ? '' : 'no-cover'}`}\n          css={[outer, SiteHeader]}\n          style={{\n            backgroundImage:\n              tagData && tagData.node.image ?\n                `url('${tagData.node.image.childImageSharp.fluid.src}')` :\n                '',\n          }}\n        >\n          <div css={inner}>\n            <SiteNav isHome={false} />\n            <SiteHeaderContent>\n              <SiteTitle>{tag}</SiteTitle>\n              <SiteDescription>\n                {tagData && tagData.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed, PostFeedRaise]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            date\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 90) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        lang\n        description\n        siteUrl\n        facebook\n        twitter\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}