{"version":3,"sources":["webpack:///./node_modules/_gatsby-theme-casper@0.1.2@gatsby-theme-casper/src/components/Pagination.tsx","webpack:///./node_modules/_gatsby-theme-casper@0.1.2@gatsby-theme-casper/src/templates/index.tsx"],"names":["navCss","css","darken","colors","darkgrey","Pagination","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","to","rel","String","fromCharCode","Array","from","length","_","i","key","className","HomePosts","pageQuery","IndexPage","props","width","data","header","childImageSharp","fluid","sizes","split","height","Number","aspectRatio","config","site","siteMetadata","lang","title","name","content","description","property","siteUrl","src","facebook","googleSiteVerification","twitter","Wrapper","outer","SiteHeader","style","backgroundImage","inner","logo","maxHeight","fixed","alt","SiteNav","isHome","id","SiteMain","PostFeed","PostFeedRaise","allMarkdownRemark","edges","map","post","node","frontmatter","draft","PostCard","fields","slug","children","pageContext","Footer"],"mappings":"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","file":"component---node-modules-gatsby-theme-casper-0-1-2-gatsby-theme-casper-src-templates-index-tsx-39098539040b517309e8.js","sourcesContent":["import { Link } from 'gatsby';\nimport * as React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\n\nexport interface PaginationProps {\n  currentPage: number;\n  numPages: number;\n}\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color .3s;\n    border: 1px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      -webkit-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow:inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link key={`pagination-number${i + 1}`} className={i + 1 === currentPage ? 'active' : ''} to={`/${i === 0 ? '' : i + 1}`}>\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import { graphql } from 'gatsby';\nimport * as React from 'react';\nimport { css } from '@emotion/core';\nimport Helmet from 'react-helmet';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport Pagination from '../components/Pagination';\n\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from './post';\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card:nth-of-type(6n + 1):not(.no-image) {\n      flex: 1 1 100%;\n      flex-direction: row;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      border-radius: 5px 0 0 5px;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-content {\n      flex: 0 1 357px;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) h2 {\n      font-size: 2.6rem;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) p {\n      font-size: 1.8rem;\n      line-height: 1.55em;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-content-link {\n      padding: 30px 40px 0;\n    }\n\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-meta {\n      padding: 0 40px 30px;\n    }\n  }\n`;\n\nexport interface IndexProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        lang: string;\n        description: string;\n        siteUrl: string;\n        facebook?: string;\n        twitter?: string;\n        googleSiteVerification: string;\n      };\n    };\n    logo: {\n      childImageSharp: {\n        fixed: any;\n      };\n    };\n    header: {\n      childImageSharp: {\n        fluid: any;\n      };\n    };\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst IndexPage: React.FC<IndexProps> = props => {\n  const width = props.data.header.childImageSharp.fluid.sizes.split(', ')[1].split('px')[0];\n  const height = String(Number(width) / props.data.header.childImageSharp.fluid.aspectRatio);\n  const config = props.data.site.siteMetadata;\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fluid.src}`}\n        />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fluid.src}`}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width} />\n        <meta property=\"og:image:height\" content={height} />\n      </Helmet>\n      <Wrapper>\n        <header\n          css={[outer, SiteHeader]}\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fluid.src}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteHeaderContent>\n              <SiteTitle>\n                {props.data.logo ? (\n                  <img\n                    style={{ maxHeight: '45px' }}\n                    src={props.data.logo.childImageSharp.fixed.src}\n                    alt={config.title}\n                  />\n                ) : (\n                  config.title\n                )}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n            <SiteNav isHome />\n          </div>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed, PostFeedRaise]}>\n              {props.data.allMarkdownRemark.edges.map(post => {\n                // filter out drafts in production\n                return (\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} />\n                  )\n                );\n              })}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        <Pagination\n          currentPage={props.pageContext.currentPage}\n          numPages={props.pageContext.numPages}\n        />\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    logo: file(relativePath: { eq: \"img/ghost-logo.png\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    header: file(relativePath: { eq: \"img/blog-cover.jpg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fluid(maxWidth: 2000) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            image {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 90) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        lang\n        description\n        siteUrl\n        facebook\n        twitter\n        googleSiteVerification\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}